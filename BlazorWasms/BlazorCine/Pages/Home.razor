@page "/"
@using BlazorCine.Services
@using Business.DTOs
@inject IHorario HorarioService
@inject ISalaService SalaService
@inject IPeliculaService PeliculaService
@inject IJSRuntime JS

<h3>Gestión de Horarios</h3>



<!-- Botón para crear un nuevo horario -->
<button class="btn btn-success mb-3" @onclick="OpenCreateModal">Nuevo Horario</button>

<div class="row mb-3">
    <div class="col">
        <label for="peliculaSelect" class="form-label">Película</label>
        <select class="form-select" id="peliculaSelect" @bind="selectedPeliculaId">
            <option value="">Todas</option>
            @foreach (var pelicula in peliculas)
            {
                <option value="@pelicula.IdPelicula">@pelicula.NombrePelicula</option>
            }
        </select>
    </div>
    <div class="col">
        <label for="salaSelect" class="form-label">Sala</label>
        <select class="form-select" id="salaSelect" @bind="selectedSalaId">
            <option value="">Todas</option>
            @foreach (var sala in salas)
            {
                <option value="@sala.IdSala">@sala.NombreSala</option>
            }
        </select>
    </div>
    
    <div class="col">
        <button class="btn btn-primary mt-4" @onclick="Filtrar">Filtrar</button>
    </div>
</div>

@if (horarios != null)
{
    <table class="table table-hover table-bordered table-striped">
        <thead>
            <tr>
                <th>Id Horario</th>
                <th>Sala</th>
                <th>Película</th>
                <th>Fecha y Hora</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var horario in horarios)
            {
                <tr>
                    <td>@horario.IdHorario</td>
                    <td>@horario.NombreSala</td>
                    <td>@horario.NombrePelicula</td>
                    <td>@horario.FechaYHora.ToString("f")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => OpenEditModal(horario)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenConfirmDeleteModal(horario.IdHorario)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Cargando...</p>
}
<!-- Modal para Crear/Editar Horario -->
<div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="horarioModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="horarioModalLabel">@(isEditMode ? "Editar Horario" : "Nuevo Horario")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="salaSelect" class="form-label">Sala</label>
                    <select class="form-select" id="salaSelect" @bind="selectedHorario.IdSala">
                        <option value="">Seleccione una sala</option>
                        @foreach (var sala in salas)
                        {
                            <option value="@sala.IdSala">@sala.NombreSala</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="peliculaSelect" class="form-label">Película</label>
                    <select class="form-select" id="peliculaSelect" @bind="selectedHorario.IdPelicula">
                        <option value="">Seleccione una película</option>
                        @foreach (var pelicula in peliculas)
                        {
                            <option value="@pelicula.IdPelicula">@pelicula.NombrePelicula</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="fechaHoraInput" class="form-label">Fecha y Hora</label>
                    <input type="datetime-local" class="form-control" id="fechaHoraInput" @bind="selectedHorario.FechaYHora">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveChanges">Guardar cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmación de Eliminación -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ¿Estás seguro de que deseas eliminar este horario?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDelete">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Mensajes -->
<div aria-live="polite" aria-atomic="true" style="position: relative; min-height: 200px;">
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast align-items-center text-white bg-success border-0" id="successToast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @successMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
        <div class="toast align-items-center text-white bg-danger border-0" id="errorToast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @errorMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

@code {
    private string successMessage;
    private string errorMessage;
    private List<HorarioDto> horarios;
    private List<SalaDto> salas = new();
    private List<PeliculaDto> peliculas = new();
    private HorarioDto selectedHorario = new HorarioDto();
    private updateDto updateDto = new updateDto();
    private bool isEditMode;
    private int horarioIdToDelete;

    // Filtros
    private int? selectedPeliculaId;
    private int? selectedSalaId;
    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdowns();
        await Filtrar();
    }

    private async Task OpenCreateModal()
    {
        isEditMode = false;
        selectedHorario = new HorarioDto();
        await LoadDropdowns();
        await ShowModal("myModal");
    }
    private async Task Filtrar()
    {
        horarios = await HorarioService.GetFilteredAsync(selectedPeliculaId, selectedSalaId, startDate, endDate);
        
    }

    private async Task OpenEditModal(HorarioDto horario)
    {
        isEditMode = true;
        selectedHorario = new HorarioDto
            {
                IdHorario = horario.IdHorario,
                IdSala = horario.IdSala,
                IdPelicula = horario.IdPelicula,
                FechaYHora = horario.FechaYHora,
                NombreSala = horario.NombreSala,
                NombrePelicula = horario.NombrePelicula
            };

        await LoadDropdowns();
        await ShowModal("myModal");
    }
    private async Task LoadDropdowns()
    {
        salas = await SalaService.GetSalasAsync();
        peliculas = await PeliculaService.GetPeliculasAsync();
    }

    private async Task ShowModal(string modalId)
    {
        await JS.InvokeVoidAsync("eval", $"new bootstrap.Modal(document.getElementById('{modalId}')).show();");
    }

    private async Task CloseModal(string modalId)
    {
        await JS.InvokeVoidAsync("eval", $"new bootstrap.Modal(document.getElementById('{modalId}')).hide();");
    }

    private async Task SaveChanges()
    {
        try
        {
            ServiceResponse result;
            if (isEditMode)
            {
               
                // Actualiza los valores de updateDto
                updateDto.IdHorario = selectedHorario.IdHorario;
                updateDto.IdSala = selectedHorario.IdSala;
                updateDto.IdPelicula = selectedHorario.IdPelicula;
                updateDto.FechaYHora = selectedHorario.FechaYHora;

                // Llama al servicio de actualización
                result = await HorarioService.UpdateAsync(updateDto);
                horarios = await HorarioService.GetAsync();
                if (result.Flag)
                {
                    successMessage = "Horario actualizado exitosamente.";
                    await ShowToast("successToast");
                }
                else
                {
                    errorMessage = "Error al actualizar el horario.";
                    await ShowToast("errorToast");
                }
            }
            else
            {
                selectedHorario.NombreSala = "00SC";
                selectedHorario.NombrePelicula = "00SC";
                selectedHorario.IdHorario = 1;
                result = await HorarioService.AddAsync(selectedHorario);
                horarios = await HorarioService.GetAsync();
                if (result.Flag)
                {
                    successMessage = "Horario creado exitosamente.";
                    await ShowToast("successToast");
                }
                else
                {
                    errorMessage = "Error al crear el horario.";
                    await ShowToast("errorToast");
                }
            }
          
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            await ShowToast("errorToast");;
        }

}
    private async Task ShowToast(string toastId)
    {
        await JS.InvokeVoidAsync("eval", $"new bootstrap.Toast(document.getElementById('{toastId}')).show();");
    }

    private void OpenConfirmDeleteModal(int id)
    {
        horarioIdToDelete = id;
        ShowModal("confirmDeleteModal");
    }

    private async Task ConfirmDelete()
    {
        var result = await HorarioService.DeleteAsync(horarioIdToDelete);
        if (result.Flag)
        {
            successMessage = "Horario eliminado exitosamente.";
            await ShowToast("successToast");
            horarios = await HorarioService.GetAsync(); // Actualizar la lista de horarios
        }
        else
        {
            errorMessage = result.Message;
            await ShowToast("errorToast");
        }
        await CloseModal("confirmDeleteModal");
    }
}
